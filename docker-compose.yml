# Docker Compose for QuantaPilotâ„¢ - Core Infrastructure

services:
  # ==============================================
  # Database Services
  # ==============================================
  postgres:
    image: postgres:15-alpine
    container_name: quantapilot_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-quantapilot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-quantapilot_password}
      POSTGRES_DB: ${POSTGRES_DB:-quantapilot}
      POSTGRES_MULTIPLE_DATABASES: "quantapilot,n8n"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/create-multiple-databases.sh:/docker-entrypoint-initdb.d/create-multiple-databases.sh
    networks:
      - quantapilot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-quantapilot}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: quantapilot_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - quantapilot_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes

  # ==============================================
  # n8n Workflow Orchestration
  # ==============================================
  n8n:
    image: n8nio/n8n:latest
    container_name: quantapilot_n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=sqlite
      - DB_SQLITE_DATABASE=/home/node/.n8n/database.sqlite
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-change_in_production}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678/webhook}
      - GENERIC_TIMEZONE=UTC
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/opt/workflows
      - ./n8n/nodes:/opt/custom-nodes
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quantapilot_network
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # API Gateway
  # ==============================================
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: quantapilot_api_gateway
    restart: unless-stopped
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-1000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3001}
    volumes:
      - ./logs/api-gateway:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quantapilot_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # AI Integration Service
  # ==============================================
  cursor-service:
    build:
      context: ./services/cursor-integration
      dockerfile: Dockerfile
    container_name: quantapilot_cursor_service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - CURSOR_API_KEY=${CURSOR_API_KEY}
      - CURSOR_API_URL=${CURSOR_API_URL:-https://api.cursor.sh/v1}
      - CURSOR_MODEL=${CURSOR_MODEL:-cursor-large}
      - CURSOR_MAX_TOKENS=${CURSOR_MAX_TOKENS:-4000}
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./logs/cursor-service:/app/logs
      - ./prompts:/app/prompts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quantapilot_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # GitHub Integration Service
  # ==============================================
  github-service:
    build:
      context: ./services/github-integration
      dockerfile: Dockerfile
    container_name: quantapilot_github_service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}
      - GITHUB_API_URL=${GITHUB_API_URL:-https://api.github.com}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./logs/github-service:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quantapilot_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # Notification Service
  # ==============================================
  notification-service:
    build:
      context: ./services/notifications
      dockerfile: Dockerfile
    container_name: quantapilot_notification_service
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./logs/notification-service:/app/logs
      - ./templates/email:/app/templates
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quantapilot_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3003/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # Web Dashboard
  # ==============================================
  dashboard:
    build:
      context: ./services/dashboard
      dockerfile: Dockerfile
    container_name: quantapilot_dashboard
    restart: unless-stopped
    ports:
      - "3004:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - REACT_APP_ENVIRONMENT=${NODE_ENV:-development}
    volumes:
      - ./logs/dashboard:/app/logs
    depends_on:
      - api-gateway
    networks:
      - quantapilot_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # Monitoring Services (Optional)
  # ==============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: quantapilot_prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - quantapilot_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: quantapilot_grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3005}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-change_in_production}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - quantapilot_network
    profiles:
      - monitoring

# ==============================================
# Networks
# ==============================================
networks:
  quantapilot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==============================================
# Volumes
# ==============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
