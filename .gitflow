# ==============================================
# QuantaPilot Git Workflow & Branching Strategy
# ==============================================

## Branch Structure

### Main Branches
- `main` - Production-ready code
- `develop` - Integration branch for features
- `staging` - Pre-production testing

### Feature Branches
- `feature/` - New features (e.g., `feature/user-authentication`)
- `bugfix/` - Bug fixes (e.g., `bugfix/login-error`)
- `hotfix/` - Critical production fixes (e.g., `hotfix/security-patch`)
- `release/` - Release preparation (e.g., `release/v1.2.0`)

## Workflow Rules

### 1. Feature Development
1. Create feature branch from `develop`
2. Develop and test locally
3. Push to remote feature branch
4. Create Pull Request to `develop`
5. Code review and approval required
6. Merge to `develop` after approval

### 2. Release Process
1. Create release branch from `develop`
2. Version bump and final testing
3. Create Pull Request to `main`
4. Merge to `main` and tag release
5. Merge back to `develop`

### 3. Hotfix Process
1. Create hotfix branch from `main`
2. Fix critical issue
3. Test thoroughly
4. Create Pull Request to `main`
5. Merge to `main` and tag hotfix
6. Merge back to `develop`

## Commit Message Convention

### Format
```
<type>(<scope>): <description>

[optional body]

[optional footer]
```

### Types
- `feat` - New feature
- `fix` - Bug fix
- `docs` - Documentation changes
- `style` - Code style changes (formatting, etc.)
- `refactor` - Code refactoring
- `test` - Adding or updating tests
- `chore` - Maintenance tasks

### Examples
```
feat(auth): add OAuth2 authentication
fix(api): resolve database connection timeout
docs(readme): update installation instructions
style(ui): format component code
refactor(workflow): simplify n8n workflow logic
test(integration): add API endpoint tests
chore(deps): update dependencies
```

## Pull Request Guidelines

### Required Checks
- [ ] Code passes linting
- [ ] All tests pass
- [ ] Documentation updated
- [ ] No security vulnerabilities
- [ ] Performance impact assessed

### Review Process
1. **Code Review** - At least 2 approvals required
2. **Security Review** - For sensitive changes
3. **Architecture Review** - For major changes
4. **Final Approval** - From team lead

### PR Template
```markdown
## Description
Brief description of changes

## Type of Change
- [ ] Bug fix
- [ ] New feature
- [ ] Breaking change
- [ ] Documentation update

## Testing
- [ ] Unit tests pass
- [ ] Integration tests pass
- [ ] Manual testing completed

## Checklist
- [ ] Code follows style guidelines
- [ ] Self-review completed
- [ ] Documentation updated
- [ ] No console.log statements
- [ ] Error handling implemented
```

## Branch Protection Rules

### Main Branch
- Require pull request reviews
- Require status checks to pass
- Require branches to be up to date
- Restrict pushes to matching branches
- Require linear history

### Develop Branch
- Require pull request reviews
- Require status checks to pass
- Allow force pushes (for release branches)

## Release Process

### Versioning
- Follow Semantic Versioning (MAJOR.MINOR.PATCH)
- Use conventional commits for automatic versioning
- Tag releases with version numbers

### Release Steps
1. Create release branch from `develop`
2. Update version in `package.json`
3. Update `CHANGELOG.md`
4. Run full test suite
5. Create release PR to `main`
6. Merge and tag release
7. Deploy to production
8. Merge back to `develop`

## Hotfix Process

### When to Use
- Critical security vulnerabilities
- Production-breaking bugs
- Data integrity issues

### Process
1. Create hotfix branch from `main`
2. Fix the issue
3. Add tests for the fix
4. Update version (patch increment)
5. Create hotfix PR to `main`
6. Merge and tag hotfix
7. Deploy immediately
8. Merge back to `develop`

## Automated Workflows

### CI/CD Pipeline
- Runs on all PRs and pushes to main branches
- Includes linting, testing, security scanning
- Builds Docker images
- Deploys to staging/production

### Branch Cleanup
- Automatic deletion of merged feature branches
- Weekly cleanup of stale branches
- Archive old release branches

## Tools and Integrations

### Required Tools
- GitHub Actions for CI/CD
- ESLint for code linting
- Prettier for code formatting
- Jest for testing
- Husky for git hooks

### Git Hooks
- Pre-commit: lint and format code
- Commit-msg: validate commit message format
- Pre-push: run tests

## Best Practices

### Code Quality
- Write self-documenting code
- Add comprehensive tests
- Follow established patterns
- Document complex logic

### Collaboration
- Communicate changes in PR descriptions
- Respond to review comments promptly
- Help review others' code
- Share knowledge and best practices

### Security
- Never commit secrets or credentials
- Use environment variables for configuration
- Follow security best practices
- Report security issues immediately
